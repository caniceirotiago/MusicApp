Index: src/RockStar/Music.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.RockStar;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\n\npublic class Music {\n    private String name;\n    private RockstarIncManager.GENRE genre; //Confirmar localização do enum, para já acho que fica na classe manager\n    private MusicCreator musicCreator;\n    private ArrayList<MusicEvaluation> evaluationList;\n    private double price;\n    private ArrayList<PriceHistory> priceHistory;\n    private boolean isActive;\n    private double classification;\n\n    public RockstarIncManager.GENRE getGenre() {\n        return genre;\n    }\n\n    public Music(String name, RockstarIncManager.GENRE genre, MusicCreator musicCreator, double price) {\n        this.name = name;\n        this.genre = genre;\n        this.musicCreator = musicCreator;        //Para já apenas um criador por musica\n        this.evaluationList = new ArrayList<>();\n        this.price = price;               //O preço seria atribuido durante a criação ?!\n        this.isActive = true;//musica assim que criada está ativa\n        this.priceHistory = new ArrayList<>();\n\n\n\n    }\n\n    public void calculateClassification(){\n        double classificationsSum = 0;\n        if(!evaluationList.isEmpty()) {\n            for(MusicEvaluation me : evaluationList){\n                classificationsSum += me.getEvaluation();\n            }\n            this.classification =  (classificationsSum / (double) evaluationList.size());\n        }\n    }\n    //Calcula a classificação depois de uma nova adição à lista\n    public void addEvaluation(Client client, int evaluation){\n        boolean evaluationAlreadyExists = false;\n        for(MusicEvaluation me : evaluationList){\n            if(me.getClient().equals(client)) {\n                evaluationAlreadyExists = true;\n                me.setEvaluation(evaluation);\n                me.setEvaluationDateTime(LocalDateTime.now());\n            }\n        }\n        if(!evaluationAlreadyExists){\n            evaluationList.add(new MusicEvaluation(client,evaluation));\n        }\n        calculateClassification();\n    }\n    //Se o cliente já existir atribui um valor diferente à classificação já existente evitando duplicados\n    //Se o cliente não tiver atribuido uma classificação faz uma nova\n\n    //getters e setters para a edição da musica por parte do music creator\n\n    public String getName() {return name;}\n\n    public void setName(String name) {this.name = name;}\n\n    public double getPrice() {return price;}\n\n    public void setPrice(double price) {this.price = price;}\n    }\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/RockStar/Music.java b/src/RockStar/Music.java
--- a/src/RockStar/Music.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/RockStar/Music.java	(date 1702224963356)
@@ -13,6 +13,10 @@
     private boolean isActive;
     private double classification;
 
+    public MusicCreator getMusicCreator() {
+        return musicCreator;
+    }
+
     public RockstarIncManager.GENRE getGenre() {
         return genre;
     }
Index: src/RockStar/MusicCreator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.RockStar;\n\nimport java.util.ArrayList;\n\npublic class MusicCreator extends User{\n    private int pin;\n\n    public MusicCreator(String name, String username, String password, String email, int pin) {\n        super(username, password, name, email);\n        this.pin = pin;\n    }\n\n    @Override\n    public void newCollection(String name) {\n        //Creating an empty album\n        allCollections.add(new Album(\"random album name\",  this));\n    }\n    public void newCollection(ArrayList<Music> listMusic) {\n\n    }\n\n    @Override\n    public ArrayList<MusicCollection> seeAllCollection() {return new ArrayList<>();}\n\n    //poderia mudar o metodo create music para retornar para este metodo um objeto tipo musica?\n    @Override\n    public void addMusicToCollection(Music music, MusicCollection musicCollection) {\n        //sera que isto assim funciona?\n        //lista de albuns\n        //pega numa musica especifica e num album especifico e coloca-a la dentro\n\n    }\n\n    public void editMusic(Music music, MusicCollection musicCollection){\n        //music.setName();\n        //music.setPrice();\n    };\n\n    public void addCreatedMusic(Music music){\n        allMusic.add(music);\n    }\n    public void seeStatistics(){};\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/RockStar/MusicCreator.java b/src/RockStar/MusicCreator.java
--- a/src/RockStar/MusicCreator.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/RockStar/MusicCreator.java	(date 1702224963365)
@@ -3,10 +3,14 @@
 import java.util.ArrayList;
 
 public class MusicCreator extends User{
-    private int pin;
+    private String pin;
 
-    public MusicCreator(String name, String username, String password, String email, int pin) {
-        super(username, password, name, email);
+    public String getPin() {
+        return pin;
+    }
+
+    public MusicCreator(String name, String username, String password, String email, String pin) {
+        super(name, username, password, email);
         this.pin = pin;
     }
 
Index: src/RockStar/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.RockStar;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\n\npublic abstract class User implements Serializable {\n    protected String username;\n    protected String password;\n    protected String name;\n    protected String email;\n    protected ArrayList<Music> allMusic;\n    protected ArrayList<MusicCollection> allCollections;\n\n    public String getUsername() {\n        return username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public User(String name, String username, String password, String email) {\n        this.username = username;\n        this.password = password;\n        this.name = name;\n        this.email = email;\n        this.allMusic = new ArrayList<>();\n        this.allCollections = new ArrayList<>();\n    }\n    public abstract void newCollection(String name);\n    public abstract void newCollection(ArrayList<Music> listMusic);\n    public abstract ArrayList<MusicCollection> seeAllCollection();\n    public abstract void addMusicToCollection(Music music, MusicCollection musicCollection);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/RockStar/User.java b/src/RockStar/User.java
--- a/src/RockStar/User.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/RockStar/User.java	(date 1702224963378)
@@ -23,6 +23,10 @@
         return email;
     }
 
+    public ArrayList<MusicCollection> getAllCollections() {
+        return allCollections;
+    }
+
     public User(String name, String username, String password, String email) {
         this.username = username;
         this.password = password;
Index: src/RockStar/Playlist.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.RockStar;\n\nimport java.util.ArrayList;\n\npublic class Playlist extends MusicCollection{\n    private Boolean isPublic;\n    private Client clientCreator;\n\n    public Playlist(String name, Client clientCreator) {\n        //Creation of empty playlist\n        super(name);\n        this.isPublic = true;\n        this.clientCreator = clientCreator;\n    }\n    public Playlist(String name, Client clientCreator, ArrayList<Music> musicList) {\n        //Creation of random playlist\n        super(name, musicList);\n        this.isPublic = true;\n        this.clientCreator = clientCreator;\n    }\n\n    @Override\n    public void addMusicToCollection() {\n\n    }\n\n    @Override\n    public void removeMusicFromCollection() {\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/RockStar/Playlist.java b/src/RockStar/Playlist.java
--- a/src/RockStar/Playlist.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/RockStar/Playlist.java	(date 1702224963369)
@@ -6,6 +6,10 @@
     private Boolean isPublic;
     private Client clientCreator;
 
+    public Boolean getPublic() {
+        return isPublic;
+    }
+
     public Playlist(String name, Client clientCreator) {
         //Creation of empty playlist
         super(name);
Index: src/RockStar/Search.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/RockStar/Search.java b/src/RockStar/Search.java
new file mode 100644
--- /dev/null	(date 1702224963376)
+++ b/src/RockStar/Search.java	(date 1702224963376)
@@ -0,0 +1,19 @@
+package src.RockStar;
+
+import java.util.ArrayList;
+
+public class Search {
+    private ArrayList<Music> foundMusics;
+    private ArrayList<MusicCollection> foundMusicCollections;
+    private ArrayList<MusicCreator> foundMusicCreators;
+
+    public Search(ArrayList<Music> foundMusics, ArrayList<MusicCollection> foundMusicCollections, ArrayList<MusicCreator> foundMusicCreators) {
+        this.foundMusics = foundMusics;
+        this.foundMusicCollections = foundMusicCollections;
+        this.foundMusicCreators = foundMusicCreators;
+    }
+    public Search(ArrayList<Music> foundMusics, ArrayList<MusicCollection> foundMusicCollections) {
+        this.foundMusics = foundMusics;
+        this.foundMusicCollections = foundMusicCollections;
+    }
+}
Index: src/RockStar/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.RockStar;\n\nimport java.io.*;\n\npublic class Main {\n    // Para a lógica de gravação funcionar houve necessidade que seja estático, confirmar com prof\n    public static RockstarIncManager gc;\n    //Reescreve o ficheiro de objetos com a nova informação (gravar) / fecha o leitor e o escritor\n    //A ideia seria usar este método em vários momentos do programa inclusive, gravaçãoo automática e onClick\n    public static void updateDataFile() throws IOException, ClassNotFoundException{\n        FileOutputStream fos = new FileOutputStream(\"mainSaveFile\");\n        ObjectOutputStream oos = new ObjectOutputStream(fos);\n        oos.writeObject(gc);\n        oos.close();\n    }\n    // Criar um novo arquivo caso nao haja\n    private static void createArchive() {\n        try {\n\n            FileOutputStream fos = new FileOutputStream(\"mainSaveFile\");\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            gc = new RockstarIncManager();\n            oos.writeObject(gc);\n            oos.close();\n            System.out.println(\"Arquivo criado com sucesso.\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        /* para depois reativar\n        //Abre o ficheiro de objeto (cria um se não existir) e lê o ficheiro de objetos\n        try{\n            FileInputStream fis = new FileInputStream(\"mainSaveFile\");\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            gc = (RockstarIncManager) ois.readObject();\n            ois.close();\n        }catch (FileNotFoundException e){\n            createArchive();\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        //Inicialização de timer para gravação automática\n        Timer timer = new Timer(true); // true cria uma thread \"Daemon \"que encerra quando o programa desliga\n        int delay = 1000 * 60 * 2; // Tempo inicial de atraso em milissegundos primeira gravação automática\n        int interval = 1000 * 60 * 2; // Intervalo entre as execuções em milissegundos (exemplo: 2 minutos)\n\n        timer.scheduleAtFixedRate(new TimerTask() {\n            @Override\n            public void run() {\n                try {\n                    updateDataFile();\n                    System.out.println(\"Auto Update executed\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } catch (ClassNotFoundException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }, delay, interval);\n        */\n        //para depois apagar abaixo\n\n\n        //Corre o programa com o ficheiro de dados gravados\n        RockstarIncManager gc = new RockstarIncManager();\n        gc.run();\n\n        //grava dados do programa ao fechar\n        updateDataFile();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/RockStar/Main.java b/src/RockStar/Main.java
--- a/src/RockStar/Main.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/RockStar/Main.java	(date 1702224963354)
@@ -22,7 +22,7 @@
             gc = new RockstarIncManager();
             oos.writeObject(gc);
             oos.close();
-            System.out.println("Arquivo criado com sucesso.");
+            System.out.println("Save File created successfully.");
         } catch (IOException e) {
             e.printStackTrace();
         }
@@ -68,6 +68,6 @@
         gc.run();
 
         //grava dados do programa ao fechar
-        updateDataFile();
+        //updateDataFile();
     }
 }
Index: src/GUIClassesSwing/ImagePaths.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUIClassesSwing/ImagePaths.java b/src/GUIClassesSwing/ImagePaths.java
new file mode 100644
--- /dev/null	(date 1702224963337)
+++ b/src/GUIClassesSwing/ImagePaths.java	(date 1702224963337)
@@ -0,0 +1,6 @@
+package src.GUIClassesSwing;
+
+public class ImagePaths {
+    public static final String APP_ICON = "images/headphone.png";
+    public static final String Login_Registration_Background ="images/backGroundImage.png";
+}
Index: src/RockStar/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.RockStar;\n\nimport java.util.ArrayList;\n\npublic class Client extends User{\n    private double balance = 0;\n    ArrayList<MusicAquisition> listOfAcquisitions;\n    ArrayList<BalanceDeposit> listOfBalanceDeposits;\n    ArrayList<Music> listOfMusicsToBuy;\n\n\n    public Client(String name, String username, String password, String email, double balance) {\n        super(username, password, name, email);\n        this.balance = balance;\n        this.listOfAcquisitions = new ArrayList<>();\n        this.listOfBalanceDeposits = new ArrayList<>();\n        this.listOfMusicsToBuy = new ArrayList<>();\n    }\n\n    public void newCollection(String name){\n        //Creation of Empty playlist\n        allCollections.add(new Playlist(\"Random Creation\", this));\n    };\n    public void newCollection(ArrayList<Music> listOfMusic){\n        //Creation of collection by random methods\n        allCollections.add(new Playlist(\"Random Creation\", this, listOfMusic));\n    };\n    public ArrayList<MusicCollection> seeAllCollection(){\n        return new ArrayList<>();\n    };\n    public void addMusicToCollection(Music music, MusicCollection musicCollection){\n\n    };\n    public void addMoney(double moneyToAdd){\n        balance += moneyToAdd;\n        listOfBalanceDeposits.add(new BalanceDeposit(moneyToAdd));\n    }\n\n    public void addMusicToAllMusicUserCollection(){}\n    public void calculatePriceOfMusicToBuy(){}\n    public void validationOfAquisition(){}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/RockStar/Client.java b/src/RockStar/Client.java
--- a/src/RockStar/Client.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/RockStar/Client.java	(date 1702224963350)
@@ -8,9 +8,8 @@
     ArrayList<BalanceDeposit> listOfBalanceDeposits;
     ArrayList<Music> listOfMusicsToBuy;
 
-
     public Client(String name, String username, String password, String email, double balance) {
-        super(username, password, name, email);
+        super(name, username, password, email);
         this.balance = balance;
         this.listOfAcquisitions = new ArrayList<>();
         this.listOfBalanceDeposits = new ArrayList<>();
Index: src/RockStar/MusicCollection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.RockStar;\n\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\n\npublic abstract class MusicCollection {\n    protected String name;\n    protected ArrayList<Music> musicList;\n    protected LocalDateTime creationDate;\n\n    public MusicCollection(String name) {\n        this.name = name;\n        this.musicList = new ArrayList<>();\n        this.creationDate = LocalDateTime.now();\n    }\n    public MusicCollection(String name, ArrayList<Music> musicList) {\n        this.name = name;\n        this.musicList = musicList;\n        this.creationDate = LocalDateTime.now();\n    }\n    public abstract void addMusicToCollection();\n    public abstract void removeMusicFromCollection();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/RockStar/MusicCollection.java b/src/RockStar/MusicCollection.java
--- a/src/RockStar/MusicCollection.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/RockStar/MusicCollection.java	(date 1702224963362)
@@ -8,6 +8,10 @@
     protected ArrayList<Music> musicList;
     protected LocalDateTime creationDate;
 
+    public String getName() {
+        return name;
+    }
+
     public MusicCollection(String name) {
         this.name = name;
         this.musicList = new ArrayList<>();
Index: src/GUIClassesSwing/GUIManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.GUIClassesSwing;\n\nimport src.RockStar.RockstarIncManager;\n\nimport javax.swing.*;\nimport java.io.Serializable;\n\npublic class GUIManager implements Serializable {\n    private ClientGUI clientFrame;\n    private LoginRegistrationGUI loginRegistrationGUI;\n    private LogRegFrame loginFrame;\n    private LogRegFrame registrationFrame;\n    private RockstarIncManager logicManager;\n\n    public GUIManager(RockstarIncManager logicManager) {\n        this.logicManager = logicManager;\n    }\n    public void run(){\n        loginRegistrationGUI = new LoginRegistrationGUI(GUIManager.this);\n    }\n    public void login(String userField,String passToString){\n        logicManager.login(userField,passToString);\n    }\n    public void sucessfullLogin(){\n        SwingUtilities.invokeLater(() -> {\n            new ClientGUI();\n            loginRegistrationGUI.setVisible(false);\n            loginFrame.dispose();\n            if(registrationFrame != null) registrationFrame.dispose();\n        });\n    }\n    public void newUser(String name,String usernameField,String password,String email){\n        logicManager.newUser(name, usernameField,password,email);\n    }\n    public LogRegFrame creationLoginFrame(){\n        LogRegFrame lf = new LogRegFrame();\n        this.loginFrame = lf;\n        return lf;\n    }\n    public LogRegFrame creationRegistrationFrame(){\n        LogRegFrame rf = new LogRegFrame();\n        this.registrationFrame = rf;\n        return rf;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUIClassesSwing/GUIManager.java b/src/GUIClassesSwing/GUIManager.java
--- a/src/GUIClassesSwing/GUIManager.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/GUIClassesSwing/GUIManager.java	(date 1702224963336)
@@ -6,6 +6,7 @@
 import java.io.Serializable;
 
 public class GUIManager implements Serializable {
+
     private ClientGUI clientFrame;
     private LoginRegistrationGUI loginRegistrationGUI;
     private LogRegFrame loginFrame;
@@ -18,20 +19,46 @@
     public void run(){
         loginRegistrationGUI = new LoginRegistrationGUI(GUIManager.this);
     }
-    public void login(String userField,String passToString){
-        logicManager.login(userField,passToString);
+    //Passa a lógica da tentativa de login para a classe lógica
+    public void loginAttempt(String userField, String passToString, boolean isMCreator, String pin){
+        logicManager.loginAttempt(userField,passToString,isMCreator,pin);
     }
-    public void sucessfullLogin(){
-        SwingUtilities.invokeLater(() -> {
-            new ClientGUI();
-            loginRegistrationGUI.setVisible(false);
-            loginFrame.dispose();
-            if(registrationFrame != null) registrationFrame.dispose();
-        });
+    //Inicia a frame correta no caso de o login ser bem sucedido
+    public void sucessfullLogin(String username, boolean isMCreator){
+        if(isMCreator){
+            SwingUtilities.invokeLater(() -> {
+                new MusicCreatorGUI(username);
+                loginRegistrationGUI.setVisible(false);
+                loginFrame.dispose();
+                if(registrationFrame != null) registrationFrame.dispose();
+            });
+        } else {
+            SwingUtilities.invokeLater(() -> {
+                new ClientGUI(username);
+                loginRegistrationGUI.setVisible(false);
+                loginFrame.dispose();
+                if(registrationFrame != null) registrationFrame.dispose();
+            });
+        }
     }
-    public void newUser(String name,String usernameField,String password,String email){
-        logicManager.newUser(name, usernameField,password,email);
+    //Caixa de diálogo em caso de login sem sucesso
+    public void unsuccessfulLogin(){
+        JOptionPane.showMessageDialog(null,"Unsuccessful Login");
+    };
+    public void newUserAttempt(String name,String usernameField,String password,String email,boolean isMCreator, String pin){
+        logicManager.newUserAttempt(name, usernameField,password,email, isMCreator, pin);
     }
+    public void successfulRegistration(){
+        JOptionPane.showMessageDialog(null,"New User Created");
+    }
+    public void unsuccessfulRegistration(int cod){
+        switch (cod){
+            case 1 : JOptionPane.showMessageDialog(null,"Unsuccessful Registration - The email already exists");
+                break;
+            case 2 : JOptionPane.showMessageDialog(null,"Unsuccessful Registration - The username already exists");
+        }
+
+    }
     public LogRegFrame creationLoginFrame(){
         LogRegFrame lf = new LogRegFrame();
         this.loginFrame = lf;
Index: src/GUIClassesSwing/LoginRegistrationGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.GUIClassesSwing;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.Serializable;\n\npublic class LoginRegistrationGUI extends JFrame implements Serializable {\n    GUIManager guiManager;\n    private JLabel background;\n    private JLabel userLoginLbl;\n    private JLabel passwordLoginLbl;\n    private JButton btnLoginOnMain;\n    private JButton btnRegistrationOnMain;\n    private JButton btnExitOnMain;\n    private JButton loginConfirmationBtn;\n    private JButton btnConfirmRegistration;\n    private JTextField usernameFieldOnLogin;\n    private JPasswordField userPasswordFieldOnLogin;\n    private JTextField firstNameOnRegistration;\n    private JTextField usernameOnRegistration;\n    private JPasswordField userPasswordFieldOnRegistation;\n    private JPasswordField userPasswordFieldOnRegistationConf;\n    private JTextField emailOnRegistration;\n    private JPopupMenu userTypeOnRegistration;\n    private JTextField pinOnRegistration;\n    private LogRegFrame loginFrame = null;\n    private LogRegFrame registrationFrame = null;\n    private Container loginOrRegistContainer;\n    private JPanel loginPanel;\n    private JPanel registationPanel;\n\n    public LoginRegistrationGUI(GUIManager guiManager) {\n        super(\"Login and Registration\"); // Define o título da janela\n\n        this.guiManager = guiManager;\n        // Inicializa os componentes gráficos\n        initComponents();\n\n        // Configurações padrão da janela\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        setSize(750, 750);\n\n        setUndecorated(true);\n        setVisible(true);\n        setLocationRelativeTo(null);\n        setResizable(false);\n\n\n\n\n        ImageIcon imageIcon = new ImageIcon(\"images/headphone.png\");\n        setIconImage(imageIcon.getImage());\n    }\n    private void initComponents() {\n\n        //Background image input\n        background =  new JLabel(new ImageIcon(\"images/backGroundImage.png\"));\n\n        //Creating Main Container in a BorderLayout style\n        Container mainContainer = new Container();\n        mainContainer.setLayout(new BorderLayout());\n\n        //Creating Main Btn in a FlowLayout Container\n        btnLoginOnMain = new JButton(\"Login\");\n        btnRegistrationOnMain = new JButton(\"Registration\");\n        btnExitOnMain = new JButton(\"Exit\");\n        Container btnContainer = new Container();\n        btnContainer.setLayout(new FlowLayout());\n        btnContainer.add(btnLoginOnMain);\n        btnContainer.add(btnRegistrationOnMain);\n        btnContainer.add(btnExitOnMain);\n\n        //Adding both background and btn container\n        mainContainer.add(btnContainer,\"South\");\n        mainContainer.add(background);\n\n\n        btnLoginOnMain.addActionListener(e -> {\n            creationOfLoginAndRegistrationFrame(1);\n        });\n        btnRegistrationOnMain.addActionListener(e -> {\n            creationOfLoginAndRegistrationFrame(2);\n        });\n        btnExitOnMain.addActionListener(e -> System.exit(0)); // nao pode ser system on exit, (fazer metodo update)\n\n        add(mainContainer);\n    }\n    public void creationOfLoginAndRegistrationFrame(int option){\n        //adicionar nota explicativa\n        switch (option){\n            case 1:\n                if(loginFrame == null){\n                    loginFrame = guiManager.creationLoginFrame();\n                    GridBagConstraints constraints = loginFrame.getConstraints();\n                    loginPanel =  new JPanel(new GridBagLayout());\n                    userLoginLbl = new JLabel(\"Username\");\n                    usernameFieldOnLogin = new JTextField(\"\",15);\n                    passwordLoginLbl = new JLabel(\"Password\");\n                    userPasswordFieldOnLogin = new JPasswordField(\"*******\", 15);\n                    loginConfirmationBtn = new JButton(\"Login\");\n                    loginConfirmationBtn.addActionListener(e -> onLoginConfirmationBtnClick());\n\n                    loginPanel.add(userLoginLbl,constraints);\n                    loginPanel.add(usernameFieldOnLogin,constraints);\n                    loginPanel.add(passwordLoginLbl,constraints);\n                    loginPanel.add(userPasswordFieldOnLogin, constraints);\n                    loginPanel.add(loginConfirmationBtn, constraints);\n\n                    loginFrame.setContentPane(loginPanel);\n                    loginFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n                    loginFrame.setVisible(true);\n                } else loginFrame.setVisible(true);\n\n                break;\n            case 2:\n                if(registrationFrame == null){\n                    registrationFrame = guiManager.creationRegistrationFrame();\n                    GridBagConstraints constraints = loginFrame.getConstraints();\n                    registationPanel = new JPanel(new GridBagLayout());\n                    firstNameOnRegistration =  new JTextField(\"First name\",15);\n                    usernameOnRegistration =  new JTextField(\"username\",15);\n                    userPasswordFieldOnRegistation = new JPasswordField(\"password\",15);\n                    userPasswordFieldOnRegistationConf = new JPasswordField(\"password \",15);\n                    emailOnRegistration =  new JTextField(\"Add your email\",15);\n                    userTypeOnRegistration =  new JPopupMenu(\"Choose your account type\");\n                    pinOnRegistration =  new JTextField(5);\n                    btnConfirmRegistration = new JButton(\"Confirm Registration\");\n                    btnConfirmRegistration.addActionListener(e -> onbtnConfirmRegistrationClick());\n\n                    registationPanel.add(firstNameOnRegistration,constraints);\n                    registationPanel.add(usernameOnRegistration,constraints);\n                    registationPanel.add(userPasswordFieldOnRegistation,constraints);\n                    registationPanel.add(userPasswordFieldOnRegistationConf,constraints);\n                    registationPanel.add(emailOnRegistration,constraints);\n                    registationPanel.add(userTypeOnRegistration,constraints);\n                    registationPanel.add(pinOnRegistration,constraints);\n                    registationPanel.add(btnConfirmRegistration,constraints);\n\n                    registrationFrame.setContentPane(registationPanel);\n                    registrationFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n                    registrationFrame.setVisible(true);\n                } else registrationFrame.setVisible(true);\n\n                break;\n        }\n    }\n    public void onLoginConfirmationBtnClick(){\n        String userField = usernameFieldOnLogin.getText();\n        char[] passField = userPasswordFieldOnLogin.getPassword();\n        String passToString = new String(passField);\n        guiManager.login(userField,passToString);\n    }\n    public void onbtnConfirmRegistrationClick(){\n        String name = firstNameOnRegistration.getText();\n        String usernameField = usernameOnRegistration.getText();\n        char[] passField = userPasswordFieldOnRegistation.getPassword();\n        char[] passFieldConfirmation = userPasswordFieldOnRegistationConf.getPassword();\n        String email = emailOnRegistration.getText();\n\n        //falta o tipo de user para já apenas regista client\n\n        String passToString = new String(passField);\n        String passToStringConf = new String(passFieldConfirmation);\n        if(!passToString.equals(passToStringConf)) System.out.println(\"diferent passwords\");\n        else{\n            guiManager.newUser(name,usernameField,passToString,email);\n        }\n    };\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUIClassesSwing/LoginRegistrationGUI.java b/src/GUIClassesSwing/LoginRegistrationGUI.java
--- a/src/GUIClassesSwing/LoginRegistrationGUI.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/GUIClassesSwing/LoginRegistrationGUI.java	(date 1702224963343)
@@ -2,8 +2,6 @@
 
 import javax.swing.*;
 import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import java.io.Serializable;
 
 public class LoginRegistrationGUI extends JFrame implements Serializable {
@@ -11,20 +9,29 @@
     private JLabel background;
     private JLabel userLoginLbl;
     private JLabel passwordLoginLbl;
+    private JLabel loginPinLbl;
+    private JLabel registPinLbl;
+    private JLabel lblFirstNameOnReg;
+    private JLabel lblUsernameOnReg;
+    private JLabel lblPasswordOnReg;
+    private JLabel lblPasswordConfOnReg;
+    private JLabel lblEmailOnReg;
     private JButton btnLoginOnMain;
     private JButton btnRegistrationOnMain;
     private JButton btnExitOnMain;
+    private JRadioButton musicCreatorLoginbtn;
+    private JRadioButton musicCreatorRegistbtn;
     private JButton loginConfirmationBtn;
     private JButton btnConfirmRegistration;
     private JTextField usernameFieldOnLogin;
     private JPasswordField userPasswordFieldOnLogin;
     private JTextField firstNameOnRegistration;
     private JTextField usernameOnRegistration;
+    private JTextField loginPinField;
     private JPasswordField userPasswordFieldOnRegistation;
     private JPasswordField userPasswordFieldOnRegistationConf;
     private JTextField emailOnRegistration;
-    private JPopupMenu userTypeOnRegistration;
-    private JTextField pinOnRegistration;
+    private JTextField registPinField;
     private LogRegFrame loginFrame = null;
     private LogRegFrame registrationFrame = null;
     private Container loginOrRegistContainer;
@@ -46,17 +53,14 @@
         setVisible(true);
         setLocationRelativeTo(null);
         setResizable(false);
-
-
-
-
-        ImageIcon imageIcon = new ImageIcon("images/headphone.png");
+        ImageIcon imageIcon = new ImageIcon(ImagePaths.APP_ICON);
         setIconImage(imageIcon.getImage());
+
     }
     private void initComponents() {
 
         //Background image input
-        background =  new JLabel(new ImageIcon("images/backGroundImage.png"));
+        background =  new JLabel(new ImageIcon(ImagePaths.Login_Registration_Background));
 
         //Creating Main Container in a BorderLayout style
         Container mainContainer = new Container();
@@ -94,11 +98,16 @@
                 if(loginFrame == null){
                     loginFrame = guiManager.creationLoginFrame();
                     GridBagConstraints constraints = loginFrame.getConstraints();
+
                     loginPanel =  new JPanel(new GridBagLayout());
                     userLoginLbl = new JLabel("Username");
                     usernameFieldOnLogin = new JTextField("",15);
                     passwordLoginLbl = new JLabel("Password");
-                    userPasswordFieldOnLogin = new JPasswordField("*******", 15);
+                    userPasswordFieldOnLogin = new JPasswordField("", 15);
+                    musicCreatorLoginbtn = new JRadioButton("Music Creator Access");
+                    musicCreatorLoginbtn.addActionListener(e -> onRadioLoginMusicCreatorBtnClick());
+                    loginPinLbl = new JLabel("PIN");
+                    loginPinField = new JTextField("",6);
                     loginConfirmationBtn = new JButton("Login");
                     loginConfirmationBtn.addActionListener(e -> onLoginConfirmationBtnClick());
 
@@ -106,7 +115,12 @@
                     loginPanel.add(usernameFieldOnLogin,constraints);
                     loginPanel.add(passwordLoginLbl,constraints);
                     loginPanel.add(userPasswordFieldOnLogin, constraints);
+                    loginPanel.add(musicCreatorLoginbtn,constraints);
+                    loginPanel.add(loginPinLbl,constraints);
+                    loginPanel.add(loginPinField,constraints);
                     loginPanel.add(loginConfirmationBtn, constraints);
+                    loginPinLbl.setVisible(false);
+                    loginPinField.setVisible(false);
 
                     loginFrame.setContentPane(loginPanel);
                     loginFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
@@ -117,26 +131,42 @@
             case 2:
                 if(registrationFrame == null){
                     registrationFrame = guiManager.creationRegistrationFrame();
-                    GridBagConstraints constraints = loginFrame.getConstraints();
+                    GridBagConstraints constraints = registrationFrame.getConstraints();
+
                     registationPanel = new JPanel(new GridBagLayout());
-                    firstNameOnRegistration =  new JTextField("First name",15);
-                    usernameOnRegistration =  new JTextField("username",15);
-                    userPasswordFieldOnRegistation = new JPasswordField("password",15);
-                    userPasswordFieldOnRegistationConf = new JPasswordField("password ",15);
-                    emailOnRegistration =  new JTextField("Add your email",15);
-                    userTypeOnRegistration =  new JPopupMenu("Choose your account type");
-                    pinOnRegistration =  new JTextField(5);
+                    lblFirstNameOnReg = new JLabel("First Name");
+                    firstNameOnRegistration =  new JTextField("",15);
+                    lblUsernameOnReg = new JLabel("Username");
+                    usernameOnRegistration =  new JTextField("",15);
+                    lblPasswordOnReg = new JLabel("Password");
+                    userPasswordFieldOnRegistation = new JPasswordField("",15);
+                    lblPasswordConfOnReg = new JLabel("Password Confirmation");
+                    userPasswordFieldOnRegistationConf = new JPasswordField("",15);
+                    lblEmailOnReg = new JLabel("Email");
+                    emailOnRegistration =  new JTextField("",15);
+                    musicCreatorRegistbtn = new JRadioButton("Music Creator Registration");
+                    musicCreatorRegistbtn.addActionListener(e -> onRadioRegistMusicCreatorBtnClick());
+                    registPinLbl = new JLabel("PIN");
+                    registPinField = new JTextField("",6);
                     btnConfirmRegistration = new JButton("Confirm Registration");
                     btnConfirmRegistration.addActionListener(e -> onbtnConfirmRegistrationClick());
 
+                    registationPanel.add(lblFirstNameOnReg,constraints);
                     registationPanel.add(firstNameOnRegistration,constraints);
+                    registationPanel.add(lblUsernameOnReg,constraints);
                     registationPanel.add(usernameOnRegistration,constraints);
+                    registationPanel.add(lblPasswordOnReg,constraints);
                     registationPanel.add(userPasswordFieldOnRegistation,constraints);
+                    registationPanel.add(lblPasswordConfOnReg,constraints);
                     registationPanel.add(userPasswordFieldOnRegistationConf,constraints);
+                    registationPanel.add(lblEmailOnReg,constraints);
                     registationPanel.add(emailOnRegistration,constraints);
-                    registationPanel.add(userTypeOnRegistration,constraints);
-                    registationPanel.add(pinOnRegistration,constraints);
+                    registationPanel.add(musicCreatorRegistbtn,constraints);
+                    registationPanel.add(registPinLbl,constraints);
+                    registationPanel.add(registPinField,constraints);
                     registationPanel.add(btnConfirmRegistration,constraints);
+                    registPinLbl.setVisible(false);
+                    registPinField.setVisible(false);
 
                     registrationFrame.setContentPane(registationPanel);
                     registrationFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
@@ -150,7 +180,12 @@
         String userField = usernameFieldOnLogin.getText();
         char[] passField = userPasswordFieldOnLogin.getPassword();
         String passToString = new String(passField);
-        guiManager.login(userField,passToString);
+        String pin = loginPinField.getText();
+        if(musicCreatorLoginbtn.isSelected()){
+            guiManager.loginAttempt(userField,passToString,true,pin);
+        } else if (!musicCreatorLoginbtn.isSelected()) {
+            guiManager.loginAttempt(userField,passToString,false,pin);
+        }
     }
     public void onbtnConfirmRegistrationClick(){
         String name = firstNameOnRegistration.getText();
@@ -158,14 +193,46 @@
         char[] passField = userPasswordFieldOnRegistation.getPassword();
         char[] passFieldConfirmation = userPasswordFieldOnRegistationConf.getPassword();
         String email = emailOnRegistration.getText();
-
-        //falta o tipo de user para já apenas regista client
-
         String passToString = new String(passField);
         String passToStringConf = new String(passFieldConfirmation);
-        if(!passToString.equals(passToStringConf)) System.out.println("diferent passwords");
+        String pin = registPinField.getText();
+        if(!passToString.equals(passToStringConf)) {
+            System.out.println("different passwords");
+            JOptionPane.showMessageDialog(null,"The two passwords are different");
+        }
         else{
-            guiManager.newUser(name,usernameField,passToString,email);
+            if(musicCreatorRegistbtn.isSelected()){
+                guiManager.newUserAttempt(name,usernameField,passToString,email,true,pin);
+            } else if (!musicCreatorRegistbtn.isSelected()) {
+                guiManager.newUserAttempt(name,usernameField,passToString,email, false,pin);
+            }
         }
+
     };
+    public void onRadioLoginMusicCreatorBtnClick(){
+        if(musicCreatorLoginbtn.isSelected()){
+            loginPinLbl.setVisible(true);
+            loginPinField.setVisible(true);
+            loginPanel.revalidate();
+            loginPanel.repaint();
+        } else if (!musicCreatorLoginbtn.isSelected()) {
+            loginPinLbl.setVisible(false);
+            loginPinField.setVisible(false);
+            loginPanel.revalidate();
+            loginPanel.repaint();
+        }
+    }
+    public void onRadioRegistMusicCreatorBtnClick(){
+        if(musicCreatorRegistbtn.isSelected()){
+            registPinLbl.setVisible(true);
+            registPinField.setVisible(true);
+            registationPanel.revalidate();
+            registationPanel.repaint();
+        } else if (!musicCreatorRegistbtn.isSelected()) {
+            registPinLbl.setVisible(false);
+            registPinField.setVisible(false);
+            registationPanel.revalidate();
+            registationPanel.repaint();
+        }
+    }
 }
Index: src/GUIClassesSwing/MusicCreatorGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.GUIClassesSwing;\n\nimport javax.swing.*;\n\npublic class MusicCreatorGUI extends JFrame {\n    public MusicCreatorGUI(){\n        super(\"Client\");\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        setSize(750,750);\n        setLocationRelativeTo(null);\n        setVisible(true);\n        ImageIcon imageIcon = new ImageIcon(\"images/headphone.png\");\n        setIconImage(imageIcon.getImage());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUIClassesSwing/MusicCreatorGUI.java b/src/GUIClassesSwing/MusicCreatorGUI.java
--- a/src/GUIClassesSwing/MusicCreatorGUI.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/GUIClassesSwing/MusicCreatorGUI.java	(date 1702224963347)
@@ -3,10 +3,10 @@
 import javax.swing.*;
 
 public class MusicCreatorGUI extends JFrame {
-    public MusicCreatorGUI(){
-        super("Client");
+    public MusicCreatorGUI(String username){
+        super("Music Creator - " + username);
         setDefaultCloseOperation(EXIT_ON_CLOSE);
-        setSize(750,750);
+        setSize(1000,1000);
         setLocationRelativeTo(null);
         setVisible(true);
         ImageIcon imageIcon = new ImageIcon("images/headphone.png");
Index: src/GUIClassesSwing/ClientGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.GUIClassesSwing;\n\nimport javax.swing.*;\n\npublic class ClientGUI extends JFrame {\n    public ClientGUI(){\n        super(\"Client\");\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        setSize(750,750);\n        setLocationRelativeTo(null);\n        setVisible(true);\n        ImageIcon imageIcon = new ImageIcon(\"images/headphone.png\");\n        setIconImage(imageIcon.getImage());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUIClassesSwing/ClientGUI.java b/src/GUIClassesSwing/ClientGUI.java
--- a/src/GUIClassesSwing/ClientGUI.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/GUIClassesSwing/ClientGUI.java	(date 1702224963332)
@@ -3,10 +3,10 @@
 import javax.swing.*;
 
 public class ClientGUI extends JFrame {
-    public ClientGUI(){
-        super("Client");
+    public ClientGUI(String username){
+        super("Client - " + username);
         setDefaultCloseOperation(EXIT_ON_CLOSE);
-        setSize(750,750);
+        setSize(1000,1000);
         setLocationRelativeTo(null);
         setVisible(true);
         ImageIcon imageIcon = new ImageIcon("images/headphone.png");
Index: src/GUIClassesSwing/LogRegFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.GUIClassesSwing;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class LogRegFrame extends JFrame {\n    GridBagConstraints constraints;\n    public GridBagConstraints getConstraints() {\n        return constraints;\n    }\n    public LogRegFrame()  {\n        setSize(450,450);\n        setBackground(Color.GRAY);\n        setUndecorated(true);\n        setVisible(true);\n        setLocationRelativeTo(null);\n        setResizable(false);\n        getContentPane();\n        constraints =  new GridBagConstraints();\n        constraints.gridx= GridBagConstraints.REMAINDER;\n        constraints.gridy = GridBagConstraints.RELATIVE;\n        constraints.gridwidth = GridBagConstraints.REMAINDER;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GUIClassesSwing/LogRegFrame.java b/src/GUIClassesSwing/LogRegFrame.java
--- a/src/GUIClassesSwing/LogRegFrame.java	(revision a1bc736c7df3d48588cfa485e0c06ad452a8c700)
+++ b/src/GUIClassesSwing/LogRegFrame.java	(date 1702224963340)
@@ -9,7 +9,7 @@
         return constraints;
     }
     public LogRegFrame()  {
-        setSize(450,450);
+        setSize(250,350);
         setBackground(Color.GRAY);
         setUndecorated(true);
         setVisible(true);
